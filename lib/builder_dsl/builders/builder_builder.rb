require 'forwardable'

module BuilderDSL
  module Builders

    # A builder that builds other builders using a minimal definition DSL.
    # In brief, classes generated by this builder offer a number of built-in DSL
    # macros that are used to describe how methods called against instances of
    # the generated builder class are translated into actions to be taken on the
    # {InstanceMethods#instance object instance} being built by the generated
    # builder instance.
    class BuilderBuilder

      # Generates a new builder class with a number of built-in DSL methods used
      # to describe how actions taken against instances of the builder class are
      # translated into actions to be taken on the {InstanceMethods#instance
      # object instance} being built. Further information on the available DSL
      # methods can be found in {ClassInstanceMethods}.
      # @return [Class] The generated builder class
      # @see ClassInstanceMethods
      def self.build
        klass = Class.new
        klass.extend(ClassInstanceMethods)
        klass.send(:include, InstanceMethods)
        klass.module_eval(&Proc.new) if block_given?
        klass
      end

      # Methods available to classes generated by {BuilderBuilder BuilderBuilder}. Provides a
      # generic, declarative DSL for describing custom builder classes.
      module ClassInstanceMethods
        include Forwardable

        # The default means by which a new instance of the
        # {ClassInstanceMethods#resource_class resource class} is initialized.
        # @see {ClassInstanceMethods#initialize_with)
        DEFAULT_INITIALIZE_WITH = lambda { |instance| resource_class.new }

        # Declares a delegate method that will be available to instances of the
        # generated builder class that describes a simple attribute that can be
        # delegated directly to an existing method affiliated with the object
        # instance being built.
        #
        # Though the underlying use of {delegate delegate} gives this method an
        # enormous amount of potential power, the {attribute attribute} method
        # is intended for use in fairly simple situations where delegation is
        # required and the `attribute` descriptor provides some semantic value.
        # More complex interactions should consider using the
        # {delegate delegate} method directly to give library users some insight
        # into the intention for more complex behavior.
        # @param [String,Symbol] attr_name The name of the method that will be
        #   available to instances of the generated builder class that when
        #   invoked will trigger the **receiver_method** on the **receiver**.
        # @param [String,Symbol] receiver_method The name of the method that
        #   should be invoked on the **receiver** object when the **attr_name**
        #   method is invoked. Defaults to a setter form of **attr_name**.
        # @param [String,Symbol] receiver The object or method of the
        #   generated builder instance that should receive invocations of
        #   **receiver_method** when the **attr_name** method is called.
        #   Defaults to the {InstanceMethods#instance object instance} being
        #   built.
        #
        #   If a String or Symbol value is provided for **receiver**, the value
        #   provided is resolved against the {InstanceMethods#instance object
        #   instance} being built at runtime to determine the appropriate
        #   receiver.
        #
        #   For example if a value of :foo were provided for the receiver
        #   argument, at runtime, the receiver would be resolved to the object
        #   returned by invoking :foo on the {InstanceMethods#instance object
        #   instance} being built. Once resolved, the **receiver_method** would
        #   then be invoked on the receiver with any approprate arguments.
        # @return [Symbol] The Symbol identifier form of **attr_name**
        #   identifying the method that will be available to instances of the
        #   generated builder class.
        # @see #delegate
        def attribute(attr_name, receiver_method = :"#{attr_name}=", receiver = nil)
          delegate(attr_name, receiver_method, receiver)
          return attr_name.to_sym
        end

        # By default, builds a new instance of the configured {#resource_class
        # resource class}. This is achieved by evaluating the configured
        # {#initialize_with} proc in the context of an instance of the generated
        # builder class to generate a new object that will be used by the
        # builder instance. If a block is given, the block is evaluated in the
        # context of the builder instance after initialization.
        # @param [Proc] block Optional block evaluated by the generated builder
        #   class instance after the {InstanceMethods#instance object instance}
        #   being built has been initialized.
        # @return [Object] Returns the generated {InstanceMethods#instance
        #   object instance}.
        # @see #initialize_with
        def build
          instance = instance_eval(&self.initialize_with)
          builder = new(instance)
          builder.instance_eval(&Proc.new) if block_given?
          instance
        end

        # Declares a method, **attr_name**, available to instances of the
        # generated builder class, that when called delegates to a
        # **builder_class** to generate an object that is then passed to the
        # **receiver_method** of the **receiver**.
        #
        # If a **builder_class** is given, the provided **builder_class** is
        # used to generate the object for the receiver. If no **builder_class**
        # is given and instead a **block** is provided, the given block is
        # treated as an anonymous builder definition that is passed to
        # {BuilderDSL.define} to generate a new builder class that will be used
        # later when **attr_name** is invoked on an instance of the generated
        # builder class.
        #
        # See {InstanceMethods#example_builder_attr} for details of the method
        # invoked when **attr_name** is called on an instance of the generated
        # builder class.
        #
        # @param [String,Symbol] attr_name The name that will be used to define
        #   the method that will be available to instances of the generated
        #   builder class that when invoked will trigger the **builder_class**.
        # @param [String,Symbol] receiver_method The name of the method that
        #   should be invoked upon the **receiver** object when the
        #   **attr_name** method is invoked. Defaults to a setter form of
        #   **attr_name**.
        # @param [Class] builder_class The builder class that should be used
        #   to generate new objects when the **attr_name** method is invoked.
        #   Cannot be used in conjunction with a given **block**.
        # @param [Proc,String,Symbol] receiver The object or method of the
        #   generated builder instance that should receive invocations of
        #   **receiver_method** when the **attr_name** method is called.
        #   Defaults to the {InstanceMethods#instance object instance} being
        #   built.
        #
        #   If a String or Symbol value is provided for **receiver**, the value
        #   provided is resolved against the {InstanceMethods#instance object
        #   instance} being built at runtime to determine the appropriate
        #   receiver.
        #
        #   For example if a value of :foo were provided for the **receiver**
        #   argument, at runtime, the **receiver** would be resolved to the
        #   object returned by invoking :foo on the {InstanceMethods#instance
        #   object instance} being built. Once resolved, the **receiver_method**
        #   would then be invoked on the **receiver** with any approprate
        #   arguments.
        #
        #   If a Proc is provided for the **receiver** argument, the Proc will
        #   be evaluated at runtime in the context of the
        #   {InstanceMethods#instance object instance} being built and should
        #   return the intended **receiver** object.
        # @param [Proc] block A block may be provided in place of a predefined
        #   **builder_class**. If such a block is provided, the given block is
        #   evaluated by {BuilderDSL.define} to generate a new anonymous
        #   builder class. Cannot be used in conjunction with a predefined
        #   **builder_class**.
        # @raise [ArgumentError] Raised if both a **builder_class** and a
        #   **block** are given or neither a **builder_class** nor **block** are
        #   given.
        # @return [Symbol] The Symbol identifier form of **attr_name**
        #   identifying the method that will be available to instances of the
        #   generated builder class.
        # @see BuilderDSL.define
        # @see #define_builder_method
        # @see InstanceMethods#example_builder_attr
        def builder(attr_name, receiver_method = "#{attr_name}=", builder_class = nil, receiver = nil)
          if block_given? ^ builder_class.nil?
            raise ArgumentError, 'Either a builder class or a builder definition is required'
          elsif block_given?
            builder_class = BuilderDSL.define(&Proc.new)
          end

          if receiver.is_a?(Proc)
            receiver_proc = receiver
          elsif receiver.is_a?(Symbol) || receiver.is_a?(String)
            receiver_proc = instance_eval("lambda { |i| @instance.#{receiver} }")
          else
            receiver_proc = lambda { |i| @instance }
          end

          define_builder_method(attr_name, receiver_method, builder_class, receiver_proc)
        end

        # Declares a delegate method that will be available to instances of the
        # generated builder class that describes a behavior that should be
        # delegated from the builder instance to the **receiver_method** of the
        # derived **receiver**.
        #
        # @param [String,Symbol] attr_name An identifer that will be used to
        #   name the delegate method defined on the builder instance.
        # @param [String,Symbol] receiver_method The method that should be
        #   invoked on the **receiver** when the delegate method is invoked.
        #   Defaults to the same value provided for **attr_name**.
        # @param [String,Symbol] receiver The object or method of the
        #   generated builder instance that should receive invocations of
        #   **receiver_method** when the **attr_name** method is called.
        #   Defaults to the {InstanceMethods#instance object instance} being
        #   built.
        #
        #   If a String or Symbol value is provided for **receiver**, the value
        #   provided is resolved against the {InstanceMethods#instance object
        #   instance} being built at runtime to determine the appropriate
        #   **receiver**.
        #
        #   For example if a value of :foo were provided for the **receiver**
        #   argument, at runtime, the **receiver** would be resolved to the
        #   object returned by invoking :foo on the {InstanceMethods#instance
        #   object instance} being built. Once resolved, the **receiver_method**
        #   would then be invoked on the **receiver** with any approprate
        #   arguments.
        # @return [Symbol] The Symbol identifier form of **attr_name**
        #   identifying the method that will be available to instances of the
        #   generated builder class.
        def delegate(attr_name, receiver_method = attr_name, receiver = nil)
          receiver = receiver.nil? || receiver.empty? ? :@instance : :"@instance.#{receiver}"
          def_delegator(receiver, receiver_method, attr_name)
          attr_name.to_sym
        end

        # When no block is given, returns the proc currently configured to be
        # invoked when a new instance of {#resource_class resource class} is
        # needed. If a custom proc has not been configured, returns the
        # {DEFAULT_INITIALIZE_WITH default initialization proc}.
        #
        # When a block is given, the method acts as a setter and the provided
        # block is preserved and later used to initialize new instances of
        # {#resource_class resource class} as they are required.
        # @return [Proc] The proc that will be used to initialize new instances
        #   of {#resouce_class resource class}.
        def initialize_with
          @initialize_with = Proc.new if block_given?
          @initialize_with || DEFAULT_INITIALIZE_WITH
        end

        # Sets a custom proc to be used when initializing new instances of
        # {#resource_class resource class}.
        # @param [Proc] initializer The proc to be used to initialize new
        #   instances or {resource_class resource class}.
        # @raise [ArgumentError] Raised if the provided **initializer** is
        #   missing or is not a proc.
        # @return [Proc] The **initializer** argument provided is returned.
        def initialize_with=(initializer)
          unless initializer.is_a?(Proc)
            raise ArgumentError, "Expected proc initializer, got #{initializer.class.name}"
          end
          @initialize_with = initializer
        end

        # The class that the generated builder class should generate instances
        # of. When no value is passed for the **klass** argument, returns the
        # currently configured resource class. If a value is provided for
        # **klass**, the method acts as a setter and the provided **klass**
        # argument is preserved and later used for the resource class of the
        # generated builder class. For further information on how instances of
        # the {#resource_class resource class} are built, see {#initialize_with}.
        # @return [Object] The class that the generated builder class will
        #   generate instances of.
        # @see #initialize_with
        def resource_class(klass = nil)
          @resource_class = klass unless klass.nil?
          @resource_class
        end

        # Sets the class that the generated builder class will generate
        # instances of. For further information on how instances of the
        # {resource_class resource class} are built, see {#initialize_with}.
        # @return [Object] The value given for the **klass** argument is
        #   returned.
        # @see #initialize_with
        def resource_class=(klass)
          @resource_class = klass
        end

        private

        # Handles the wiring required to invoke a builder when **attr_name** is
        # invoked.
        def define_builder_method(attr_name, receiver_method, builder_class, receiver_proc)
          define_method(attr_name) do |existing_object = nil, &block|
            begin
              if block.nil? ^ !!existing_object
                raise ArgumentError, 'Either a static instance or a builder proc is required'
              end
              receiver = instance_eval(&receiver_proc)
              instance = block.nil? ? existing_object : builder_class.build(&block)
              receiver.send(receiver_method, instance)
              instance
            rescue Exception
              $@.delete_if{|s| %r"#{Regexp.quote(__FILE__)}"o =~ s}
              ::Kernel::raise
            end
          end
        end
      end

      # Methods available to instances of a generated builder class.
      module InstanceMethods
        # Initializes a new instance of the generated builder class. Requires
        # the {ClassInstanceMethods#resource_class resource class} **instance**
        # that the builder will populate to be provided.
        # @param [Object] instance The object that should be populated by the
        #   builder instance.
        def initialize(instance)
          @instance = instance
        end

        # Returns the {InstanceMethods#instance object instance} being built by
        # the builder instance.
        # @return [Object] The {InstanceMethods#instance object instance} being
        #   built by the builder.
        def instance
          return @instance
        end

        # @!method example_builder_attr(existing_object = nil, &block)
        #   Reference for instance methods defined via {ClassInstanceMethods#builder}.
        #
        #   This method is not actually defined, but serves as a reference for
        #     the instance method defined when an attribute is defined on the
        #     parent builder class using {ClassInstanceMethods#builder}.
        #
        #     Invokes the `receiver_method` of `receiver` with the provided
        #     **existing_object** or a new object generated by invoking the
        #     *build* method of the derived `builder_class` with the given
        #     **block**.
        #   @param [Object] existing_object An existing object to use as the
        #     argument to `receiver_method`. Cannot be used in conjunction
        #     with a block.
        #   @param [Proc] block A block to be given to the *build* method of
        #     the derived `builder_class` to generate a new object. Cannot be
        #     used in conjunction with a provided **existing_object**.
        #   @raise [ArgumentError] Raised if both an **existing_object** and
        #     **block** are given or neither an **existing_object** nor
        #     **block** are provided.
        #   @return [Object] The provided **existing_object** or the object
        #     generated by invoking the *build* method of the `builder_class`
        #     with the given **block**.
        #   @see ClassInstanceMethods#builder
      end

    end
  end
end
